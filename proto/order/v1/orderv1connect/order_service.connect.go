// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: order/v1/order_service.proto

package orderv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ChristianGaertner/connect-rpc-demo/order/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OrderModName is the fully-qualified name of the OrderMod service.
	OrderModName = "order.v1.OrderMod"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OrderModCreateOrderProcedure is the fully-qualified name of the OrderMod's CreateOrder RPC.
	OrderModCreateOrderProcedure = "/order.v1.OrderMod/CreateOrder"
)

// OrderModClient is a client for the order.v1.OrderMod service.
type OrderModClient interface {
	CreateOrder(context.Context, *connect.Request[v1.CreateOrderRequest]) (*connect.Response[v1.CreateOrderRequest], error)
}

// NewOrderModClient constructs a client for the order.v1.OrderMod service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrderModClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OrderModClient {
	baseURL = strings.TrimRight(baseURL, "/")
	orderModMethods := v1.File_order_v1_order_service_proto.Services().ByName("OrderMod").Methods()
	return &orderModClient{
		createOrder: connect.NewClient[v1.CreateOrderRequest, v1.CreateOrderRequest](
			httpClient,
			baseURL+OrderModCreateOrderProcedure,
			connect.WithSchema(orderModMethods.ByName("CreateOrder")),
			connect.WithClientOptions(opts...),
		),
	}
}

// orderModClient implements OrderModClient.
type orderModClient struct {
	createOrder *connect.Client[v1.CreateOrderRequest, v1.CreateOrderRequest]
}

// CreateOrder calls order.v1.OrderMod.CreateOrder.
func (c *orderModClient) CreateOrder(ctx context.Context, req *connect.Request[v1.CreateOrderRequest]) (*connect.Response[v1.CreateOrderRequest], error) {
	return c.createOrder.CallUnary(ctx, req)
}

// OrderModHandler is an implementation of the order.v1.OrderMod service.
type OrderModHandler interface {
	CreateOrder(context.Context, *connect.Request[v1.CreateOrderRequest]) (*connect.Response[v1.CreateOrderRequest], error)
}

// NewOrderModHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrderModHandler(svc OrderModHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	orderModMethods := v1.File_order_v1_order_service_proto.Services().ByName("OrderMod").Methods()
	orderModCreateOrderHandler := connect.NewUnaryHandler(
		OrderModCreateOrderProcedure,
		svc.CreateOrder,
		connect.WithSchema(orderModMethods.ByName("CreateOrder")),
		connect.WithHandlerOptions(opts...),
	)
	return "/order.v1.OrderMod/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OrderModCreateOrderProcedure:
			orderModCreateOrderHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOrderModHandler returns CodeUnimplemented from all methods.
type UnimplementedOrderModHandler struct{}

func (UnimplementedOrderModHandler) CreateOrder(context.Context, *connect.Request[v1.CreateOrderRequest]) (*connect.Response[v1.CreateOrderRequest], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("order.v1.OrderMod.CreateOrder is not implemented"))
}
